[core]
        quotepath = false
        whitespace = trailing-space,space-before-tab,indent-with-non-tab,fix
        editor = emacs
        pager = less -F -X
        excludesfile = ~/.gitignore
        autocrlf = input
        trustctime = false
        compression = 9

[achievement]
        upload = false
[user]
        name = Manfred Touron
        email = m@42.am
        signingkey = CABAE1B5
[github]
        user = moul
[alias]
        assume = update-index --assume-unchanged
        assumed = "!git ls-files -v | grep ^h | cut -c 3-"
        ci = "commit -s -S"
        amend = commit -s -S --amend
        commit = commit -s -S

        full-fetch = "!cd ${GIT_PREFIX:-.}; find . -type d -name .git -execdir printf \"\\033[0;34m\" \\; -execdir pwd \\; -execdir printf \"\\033[0;29m\" \\; -execdir git fetch \\; -execdir printf \"\\n\" \\;"
        full-status = "!cd ${GIT_PREFIX:-.}; git status .; find . -type d -name .git -execdir printf \"\\033[0;34m\" \\; -execdir pwd \\; -execdir printf \"\\033[0;29m\" \\; -execdir git status . \\; -execdir printf \"\\n\" \\;"
        fulldiff = "!git diff --stat; git diff --name-status; git diff --cached"
        graph = "log --graph --oneline --decorate"
        log-first-date = !"git log --date-order --date=iso --pretty=\"format:%ad\" --reverse | head -1"
        oneline = log --pretty=oneline --abbrev-commit --graph --decorate
        ours = "!f() { git checkout --ours $@ && git add $@; }; f"
        svnpull = svn rebase
        svnpush = svn dcommit
        theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
        unassume = update-index --no-assume-unchanged
        undo = git reset --soft HEAD^
        cdup = rev-parse --show-cdup
        tags = tag -n1 -l
        ignore = update-index --assume-unchanged
        ls-ignored = ls-files --exclude-standard --ignored --others
        whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
        whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
        unpushed = cherry -v
        whatrelease = name-rev --name-only
        contains = branch --contains
        justpushed = log origin/master@{\"1 hour ago\"}..origin/master --
        timegrep = log -S
        diffgrep = log -p -S
        lost = !"git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"
        rawlog = log --format=\"format:commit %H%nAuthor:%an%n%n%B%n\"
        brage = "!f() { git for-each-ref --sort=committerdate refs/heads $1  --format=\"%(refname:short)\" ; }; g() { for C in $(f $1) ; do git show -s --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset  $C\" \"$C\" -- ; done; }; g "
        brageall = !git brage refs/remotes
        tagage = "!sh -c 'git for-each-ref --sort=taggerdate refs/tags --format=\"%(refname:short)\"'"
        brlog = "!sh -c 'for C in $(git for-each-ref --sort=committerdate refs/heads --format=\"%(refname:short)\") ; do git show  -s --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset  $C\" \"$C\" -- ; git show --stat -s $C ; echo; done'"
        fileheads = "!sh  -c 'for C in $(git for-each-ref --sort=committerdate refs/heads --format=\"%(refname:short)\"| tac) ; do git show -s --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset  $C\" \"$C\" -- ; git log -p -1 $C -- $0; echo; done'"
        thisbranch = rev-parse --abbrev-ref HEAD
        unadd = git reset HEAD
        pup = !git pull && git submodule init && git submodule update && git submodule status && git pull --recurse-submodules


[log]
        decorate = true

[color]
        diff = auto
        ui = auto
        status = auto
        interactive = auto
        branch = auto

[color "branch"]
        current = yellow reverse
        local = yellow
        remote = green

[color "diff"]
        meta = magenta bold
        frag = magenta bold
        old = red bold
        new = blue bold

[color "status"]
        added = yellow
        changed = green
        untracked = cyan

[status]
        showUntrackedFiles = normal

[merge]
        # Include the summary of merged commits into all newly created merge
        # commits. The newly created merge commit will contain a one-line summary
        # of every (well, most) merged commits.
        log = true

        # Show merge statistics after merge.
        stat = true

        # merge tool binary
        tool = ksdiff

[mergetool]
        keepBackup = true

[mergetool "ksdiff"]
        cmd = "ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot"

[mergetool "sourcetree"]
        cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
        trustExitCode = true

[diff]
        tool = ksdiff
        renames = copies
        algorithm = patience

[difftool "ksdiff"]
        cmd = "ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\""

[difftool]
        prompt = false

[branch]
        # When creating a new branch off a remote branch, always set it up to
        # track the remote branch so that we can pull from there.
        autosetupmerge = always

        autosetuprebase = always
        rebase = true

[branch "master"]
        rebase = true
        #mergeoptions = --no-commit --no-ff
        mergeoptions = --no-ff

[gc]
        # Do not remove references under .git/refs/heads and .git/refs/tags when
        # git gc is run. The default behavior of git-gc is to pack the references
        # and store the packed references in .git/packed-refs. I personally find
        # the references kept in files under .git/refs very useful, they make the
        # retrieval of branch or tag info very easy from a shell script so I do
        # not want to have them packed when I run git-gc.
        packrefs = 0

[pack]
        threads = 4
        windowMemory = 256m
        packSizeLimit = 128m

[help]
        autocorrect = 1

[push]
        #default = upstream

[url "git@git.onouo.com:"]
        insteadOf = "onouo:"

[url "git@pathwar.net:"]
        insteadOf = "pathwar:"

[url "git@github.com:"]
        insteadOf = "gh:"

[url "git@gist.github.com:"]
        insteadOf = "gst:"

#[credential]
#       helper = osxkeychain

#[remote "origin"]
        fetch = +refs/pull/*/head:refs/remotes/origin/pr/*

[remote "upstream"]
        fetch = +refs/pull/*/head:refs/remotes/upstream/pr/*

[remote "pr"]
        fetch = +refs/pull/*/head:refs/remotes/origin/pr/*

[github]
        user = moul
        token = xxxxx

[format]
        signoff = true

        # Add the patch number and the total number of patches in the series to
        # the subject of the patch email if more than one patch is being produced.
        numbered = auto

        cc = m@42.am

        subjectprefix = CHANGE

[commit]
        gpgsign = true
        signoff = true

[include]
        path = ".gitconfig_private"
[push]
	default = simple
